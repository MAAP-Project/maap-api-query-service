# https://github.com/awslabs/serverless-application-model/blob/develop/versions/2016-10-31.md
AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31

Parameters:
  Stage:
    Type: String
  GediDatabaseSnapshotIdentifier:
    Type: String
  PermissionsBoundaryArn:
    Type: String
    Default: ""
  GediDatabaseHost:
    Type: "AWS::SSM::Parameter::Value<String>"
    Default: /dev/gedi-cal-val-db/host
  GediDatabaseName:
    Type: "AWS::SSM::Parameter::Value<String>"
    Default: /dev/gedi-cal-val-db/name
  GediDatabaseUser:
    Type: "AWS::SSM::Parameter::Value<String>"
    Default: /dev/gedi-cal-val-db/user
  GediDatabasePass:
    Type: "AWS::SSM::Parameter::Value<String>"
    Default: /dev/gedi-cal-val-db/pass

Conditions:
  NoPermissionBoundary:
    Fn::Equals:
      - Ref: PermissionsBoundaryArn
      - ""

Globals:
  Function:
    Runtime: nodejs10.x
    Timeout: 180
    Tracing: Active
    Environment:
      Variables:
        NODE_ENV: 'production'

Resources:
  # Meta Functions
  # ---------------
  DetermineBackend:
    Type: AWS::Serverless::Function
    Properties:
      Handler: determine-backend.default
      CodeUri: ./dist
      PermissionsBoundary:
        Fn::If:
          - NoPermissionBoundary
          - Ref: AWS::NoValue
          - Ref: PermissionsBoundaryArn

  CaptureErrors:
    Type: AWS::Serverless::Function
    Properties:
      Handler: capture-errors.default
      CodeUri: ./dist
      Environment:
        Variables:
          QUERY_BUCKET: !Ref QueryResultsBucket
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref QueryResultsBucket
      PermissionsBoundary:
        Fn::If:
          - NoPermissionBoundary
          - Ref: AWS::NoValue
          - Ref: PermissionsBoundaryArn

  CaptureMetadata:
    Type: AWS::Serverless::Function
    Properties:
      Handler: capture-metadata.default
      CodeUri: ./dist
      Environment:
        Variables:
          QUERY_BUCKET: !Ref QueryResultsBucket
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref QueryResultsBucket
      PermissionsBoundary:
        Fn::If:
          - NoPermissionBoundary
          - Ref: AWS::NoValue
          - Ref: PermissionsBoundaryArn

  # Query Functions
  # ---------------
  QueryGediCalValPostgres:
    Type: AWS::Serverless::Function
    Properties:
      Handler: query-postgres.default
      CodeUri: ./dist
      Environment:
        Variables:
          DB_HOST: !Ref GediDatabaseHost
          DB_NAME: !Ref GediDatabaseName
          DB_USER: !Ref GediDatabaseUser
          DB_PASS: !Ref GediDatabasePass
          QUERY_BUCKET: !Ref QueryResultsBucket
          TABLE: '"gedi_insitu"."plot_tree_data"'
          GEOM_COL: "geom_obj"
          PLOT_TABLE: '"gedi_insitu"."plotdata"'
          TREE_TABLE: '"gedi_insitu"."treedata"'
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref QueryResultsBucket
      PermissionsBoundary:
        Fn::If:
          - NoPermissionBoundary
          - Ref: AWS::NoValue
          - Ref: PermissionsBoundaryArn

  # State Machine
  # --------------
  RunQuery:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: !Sub ${AWS::StackName}-RunQuery
      DefinitionString: !Sub
        - |-
          {
            "StartAt": "${DetermineBackend}",
            "States": {

              "${DetermineBackend}": {
                "Type": "Task",
                "Resource": "${DetermineBackendArn}",
                "InputPath": "$.src",
                "ResultPath": "$.backend",
                "Catch": [{
                  "ErrorEquals": [ "States.ALL" ],
                  "ResultPath": "$.error",
                  "Next": "${CaptureErrors}"
                }],
                "Next": "${RouteToBackendHandler}"
              },

              "${RouteToBackendHandler}": {
                "Type": "Choice",
                "Choices": [
                  {
                    "Variable": "$.backend",
                    "StringEquals": "gedi-postgres",
                    "Next": "${QueryGediCalValPostgres}"
                  }
                ],
                "Default": "${HandleUnknownBackend}"
              },

              "${HandleUnknownBackend}": {
                "Type": "Pass",
                "Result": {
                  "Error": "NoBackendFound",
                  "Cause": "No appropriate backend found for given Collection or Granule."
                },
                "ResultPath": "$.error",
                "Next": "${CaptureErrors}"
              },

              "${QueryGediCalValPostgres}": {
                "Type": "Task",
                "Resource": "${QueryGediCalValPostgresArn}",
                "Catch": [{
                  "ErrorEquals": [ "States.ALL" ],
                  "ResultPath": "$.error",
                  "Next": "${CaptureErrors}"
                }],
                "ResultPath": null,
                "Next": "${CaptureMetadata}"
              },

              "${CaptureErrors}": {
                "Type": "Task",
                "Resource": "${CaptureErrorsArn}",
                "ResultPath": null,
                "Next": "${CaptureMetadata}"
              },

              "${CaptureMetadata}": {
                "Type": "Task",
                "Resource": "${CaptureMetadataArn}",
                "End": true
              }
            }
          }
        - DetermineBackend: Determine Backend
          DetermineBackendArn: !GetAtt DetermineBackend.Arn

          RouteToBackendHandler: Route to appropriate query handler
          HandleUnknownBackend: No backend found

          QueryGediCalValPostgres: Query GEDI Cal Val DB
          QueryGediCalValPostgresArn: !GetAtt QueryGediCalValPostgres.Arn

          CaptureErrors: Record error
          CaptureErrorsArn: !GetAtt CaptureErrors.Arn

          CaptureMetadata: Record metadata
          CaptureMetadataArn: !GetAtt CaptureMetadata.Arn

      RoleArn: !GetAtt StatesExecutionRole.Arn

  # IAM Roles
  # ----------
  StatesExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - !Sub states.${AWS::Region}.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: StatesExecutionPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: "*"
      PermissionsBoundary:
        Fn::If:
          - NoPermissionBoundary
          - Ref: AWS::NoValue
          - Ref: PermissionsBoundaryArn

  # Buckets
  # --------
  QueryResultsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-query-results
      LifecycleConfiguration:
        Rules:
          - ExpirationInDays: 7
            Status: Enabled

Outputs:
  QueryStateMachineArn:
    Description: Query State Machine ARN
    Value: !GetAtt RunQuery.Arn
